{"version":3,"file":"main.c023fdf4.iframe.bundle.js","mappings":";;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEA;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACWA;;;;;;;ACMA;;;;;;;AAasources":["webpack://@asu/app-degree-pages/./src/components/DetailPage/components/AffordingCollege/index.style.js","webpack://@asu/app-degree-pages/./src/components/DetailPage/components/ExampleCareers/index.style.js","webpack://@asu/app-degree-pages/./src/components/ListingPage/components/Filters/index.style.js","webpack://@asu/app-degree-pages/./src/components/ListingPage/components/IntroContent/index.js","webpack://@asu/app-degree-pages/./src/components/ListingPage/components/ProgramList/ListView/index.style.js","webpack://@asu/app-degree-pages/./src/core/components/Styles/index.js"],"sourcesContent":["// @ts-check\nimport styled from \"styled-components\";\n\nconst Section = styled.section`\n  position: relative;\n  padding-top: var(--uds-dp-section-margin);\n  padding-bottom: var(--uds-dp-section-margin);\n`;\n\nconst Background = styled.div`\n  background-image: url(\"https://asu.github.io/asu-unity-stack/@asu/unity-bootstrap-theme/static/media/TopoPatternWhite.529b0b3d.png\");\n  background-position: center;\n  background-size: contain;\n  position: absolute;\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  width: 100vw;\n  max-width: 1920px;\n  height: 100%;\n  z-index: -1;\n`;\n\nexport { Section, Background };\n","// @ts-check\nimport styled from \"styled-components\";\n\nconst widthSetUp = `\n  width: unset !important;\n  min-width: unset !important;\n`;\n\nconst SunIcon = styled.i`\n  color: #fecc41;\n  font-size: 1.2rem;\n  ${widthSetUp}\n`;\nconst LeafIcon = styled.i`\n  color: #78be21;\n  ${widthSetUp}\n`;\n\nexport { SunIcon, LeafIcon };\n","// @ts-check\nimport styled from \"styled-components\";\n\nconst Section = styled.div`\n  .hint-container {\n    margin-top: -1.25rem;\n    margin-bottom: 2rem;\n  }\n\n  @media (max-width: 768px) {\n    .hint-container {\n      display: none;\n    }\n    .filter-action-buttons {\n      & {\n        * {\n          margin: 0;\n        }\n        .btn-link {\n          padding: 1rem;\n        }\n      }\n    }\n  }\n`;\n\nconst ButtonLink = styled.button`\n  font-weight: 400;\n  text-decoration: underline;\n`;\n\nexport { Section, ButtonLink };\n","// @ts-check\nimport { Video } from \"@asu/components-core\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nimport { spreadClasses } from \"../../../../../../../shared\";\nimport {\n  ApplyNow,\n  OverlapContentImage,\n  ParagrapList,\n} from \"../../../../core/components\";\nimport {\n  contentPropShape,\n  contentPropType,\n  imagePropType,\n  imagePropShape,\n  tagHeadingList,\n  videoPropType,\n} from \"../../../../core/models\";\nimport { parseHeading } from \"../../../../core/utils\";\n\n/**\n * @typedef {import('../../../../core/types/listing-page-types').IntroContentProps} IntroContentProps\n */\n\nconst PhotoGrid = styled.div`\n  .photo-item {\n    padding-bottom: 1.25rem;\n  }\n`;\n\nconst SectionWrapper = styled.section`\n  @media (max-width: 480px) {\n    .uds-img,\n    .uds-video-container {\n      margin: 0;\n    }\n  }\n`;\n\n/**\n * @param {IntroContentProps} props\n * @returns {JSX.Element}\n */\nfunction textPhotoGridTypeHtmlTemplate({\n  applyNowUrl,\n  title,\n  contents,\n  photoGrid,\n}) {\n  const Heading = parseHeading(title);\n\n  return (\n    <section\n      className=\"container\"\n      data-type=\"text-photo-grid\"\n      data-testid=\"intro-content\"\n    >\n      <div className=\"row\">\n        <div className=\"col-sm-12 col-md-5\">\n          <Heading className=\"mt-0\">\n            <span className={`${spreadClasses(title.cssClass)}`}>\n              {title.text}\n            </span>\n          </Heading>\n          <ParagrapList contents={contents} />\n          <ApplyNow href={applyNowUrl} />\n        </div>\n        <div className=\"col-sm-12 col-md-7 d-none d-sm-none d-md-block\">\n          <PhotoGrid className=\"row\">\n            {photoGrid.images.map((image, index) => (\n              <div\n                className=\"photo-item col-sm-12 col-md-6 col-lg-6\"\n                key={`img-${index + 1}`}\n              >\n                <img\n                  className={`mg-fluid ${spreadClasses(image.cssClass)}`}\n                  src={image.url}\n                  alt={image.altText}\n                  style={{ maxWidth: \"100%\" }}\n                />\n              </div>\n            ))}\n          </PhotoGrid>\n        </div>\n      </div>\n    </section>\n  );\n}\n\n/**\n * @param {IntroContentProps} props\n * @returns {JSX.Element}\n */\nfunction textTextMediaTypeHtmlTemplate({\n  applyNowUrl,\n  title,\n  contents,\n  image,\n  video,\n}) {\n  const Heading = parseHeading(title);\n\n  return (\n    <SectionWrapper\n      className=\"container\"\n      data-type=\"text-media\"\n      data-testid=\"intro-content\"\n    >\n      <div className=\"row gy-3\">\n        <div className=\"col-sm-12 col-md-5\">\n          <Heading className=\"mt-0\">\n            <span className={`${spreadClasses(title.cssClass)}`}>\n              {title.text}\n            </span>\n          </Heading>\n          <ParagrapList contents={contents} />\n          <ApplyNow href={applyNowUrl} />\n        </div>\n        <div className=\"col-sm-12 col-md-7 mt-2 mt-sm-0\">\n          {video && (\n            <Video\n              type={video.type}\n              url={video.url}\n              vttUrl={video.vttUrl}\n              title={video.title}\n              className=\"mt-0\"\n            />\n          )}\n          {image && (\n            <div className=\"uds-img\">\n              <img src={image.url} className=\"img-fluid\" alt={image.altText} />\n            </div>\n          )}\n        </div>\n      </div>\n    </SectionWrapper>\n  );\n}\n\n/**\n * @param {IntroContentProps} props\n * @returns {JSX.Element}\n */\nfunction textImageOverlapTypeHtmlTemplate({\n  applyNowUrl,\n  title,\n  contents,\n  image,\n}) {\n  return (\n    <section\n      className=\"container\"\n      data-type=\"text-image-overlay\"\n      data-testid=\"intro-content\"\n    >\n      <div className=\"row\">\n        <div className=\"col-md-12\">\n          <OverlapContentImage\n            title={title.text}\n            contents={contents}\n            image={image}\n            contentDirection=\"right\"\n            contentChildren={\n              <div className=\"mt-2\">\n                <ApplyNow href={applyNowUrl} />\n              </div>\n            }\n          />\n        </div>\n      </div>\n    </section>\n  );\n}\n\n/**\n * @param {IntroContentProps} props\n * @returns {JSX.Element}\n */\nconst textTypeHtmlTemplate = ({ applyNowUrl, title, contents }) => {\n  const Heading = parseHeading(title);\n\n  return (\n    <section className=\"container\" data-type=\"text\" data-testid=\"intro-content\">\n      <div className=\"row\">\n        <div className=\"col-sm-12 col-md-5\">\n          <Heading className=\"mt-0\">\n            <span className={`${spreadClasses(title.cssClass)}`}>\n              {title.text}\n            </span>\n          </Heading>\n        </div>\n        <div className=\"col-sm-12 col-md-7\">\n          <ParagrapList contents={contents} />\n          <ApplyNow href={applyNowUrl} />\n        </div>\n      </div>\n    </section>\n  );\n};\n\n/**\n *\n * @param {IntroContentProps} props\n * @returns {JSX.Element}\n */\nconst IntroContent = ({\n  applyNowUrl,\n  type,\n  title,\n  contents,\n  image,\n  video,\n  photoGrid,\n}) => {\n  const templateTypes = {\n    \"text\": () => textTypeHtmlTemplate({ applyNowUrl, title, contents }),\n    \"text-media\": () =>\n      textTextMediaTypeHtmlTemplate({\n        applyNowUrl,\n        title,\n        contents,\n        image,\n        video,\n      }),\n    \"text-image-overlay\": () =>\n      textImageOverlapTypeHtmlTemplate({ applyNowUrl, title, contents, image }),\n    \"text-photo-grid\": () =>\n      textPhotoGridTypeHtmlTemplate({\n        applyNowUrl,\n        title,\n        contents,\n        image,\n        photoGrid,\n      }),\n    \"undefined\": () => {\n      // eslint-disable-next-line no-console\n      console.error(\n        `the type '${type}' is not supported by the 'IntroContent' component.`\n      );\n      return null;\n    },\n  };\n\n  return templateTypes[type]();\n};\n\nIntroContent.propTypes = {\n  applyNowUrl: PropTypes.string,\n  type: PropTypes.oneOf([\n    \"text\",\n    \"text-media\",\n    \"text-image-overlay\",\n    \"text-photo-grid\",\n  ]).isRequired,\n  video: PropTypes.shape({ ...videoPropType }),\n  image: PropTypes.shape({ ...imagePropType }),\n  header: contentPropShape,\n  title: PropTypes.shape({\n    ...contentPropType,\n    component: PropTypes.oneOf(tagHeadingList),\n  }),\n  contents: PropTypes.arrayOf(contentPropShape),\n  photoGrid: PropTypes.shape({\n    images: PropTypes.arrayOf(imagePropShape),\n  }),\n};\n\nexport { IntroContent };\n","// @ts-check\n\nimport styled, { css } from \"styled-components\";\n\nconst tableLoader = css`\n  @keyframes loading {\n    40% {\n      background-position: 100% 0;\n    }\n    100% {\n      background-position: 100% 0;\n    }\n  }\n\n  &[data-loading=\"true\"] {\n    td {\n      position: relative;\n\n      .bar {\n        background-color: #e7e7e7;\n        height: 14px;\n        border-radius: 7px;\n        width: 80%;\n      }\n\n      &:after {\n        position: absolute;\n        transform: translateY(-50%);\n        top: 50%;\n        left: 0;\n        content: \"\";\n        display: block;\n        width: 100%;\n        height: 24px;\n        background-image: linear-gradient(\n          100deg,\n          rgba(255, 255, 255, 0),\n          rgba(255, 255, 255, 0.5) 60%,\n          rgba(255, 255, 255, 0) 80%\n        );\n        background-size: 200px 24px;\n        background-position: -100px 0;\n        background-repeat: no-repeat;\n        animation: loading 1s infinite;\n      }\n    }\n  }\n`;\n\nconst Table = styled.table`\n  ${tableLoader}\n  --table-border-color: #e5e5e5;\n\n  background-color: #fafafa;\n  border: 1px solid var(--table-border-color);\n  border-collapse: collapse;\n  padding: 5px;\n\n  width: 100%;\n  margin: 0 auto;\n  clear: both;\n  border-spacing: 0;\n\n  a {\n    text-decoration: none;\n  }\n\n  thead {\n    background: #d0d0d0;\n    th {\n      outline: none;\n      :focus {\n        box-shadow: 0px 0px 0px 2px #fff, 0px 0px 0px 4px #191919 !important;\n      }\n    }\n  }\n\n  th,\n  td {\n    padding: 8px 12px;\n    // display: inline-block;\n  }\n\n  tr {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: baseline;\n    flex-wrap: wrap;\n\n    td {\n      vertical-align: top;\n    }\n\n    .major {\n      width: 250px;\n      a {\n        font-weight: 700;\n      }\n    }\n\n    .degree {\n      width: 75px;\n    }\n\n    .required-course {\n      width: 100px;\n    }\n\n    .campus-location {\n      width: 90px;\n      & > div {\n        width: fit-content;\n      }\n    }\n\n    .accelerated-concurrent {\n      width: 120px;\n    }\n\n    .college {\n      width: 210px;\n    }\n\n    .compare-fav {\n      // width: 180px;\n    }\n\n    .apply-info {\n      width: 168px;\n      & .btn {\n        width: fit-content;\n        :first-child {\n          margin-bottom: 0.5rem;\n        }\n      }\n    }\n  }\n\n  tbody {\n    tr {\n      border: 1px solid var(--table-border-color);\n      border-top: 0;\n\n      &:not(.row-info):hover {\n        background-color: #e8e8e8;\n      }\n\n      .info-apply .cell-container {\n        display: flex;\n        flex-direction: column;\n        align-items: flex-end;\n        gap: 0.5rem;\n      }\n\n      td .cell-container {\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        gap: 0.5rem;\n      }\n    }\n\n    tr.row-info {\n      td > div {\n        position: relative;\n      }\n\n      input.togle-more-text {\n        opacity: 0;\n        position: absolute;\n        pointer-events: none;\n\n        &:checked + .desc-long {\n          max-height: fit-content;\n          overflow: auto;\n        }\n\n        &:not(:checked) + .desc-long::after {\n          content: \" \";\n          height: 1rem;\n          background: rgba(250, 250, 250, 0.9);\n          box-shadow: -1px -2px 20px 15px #fafafa;\n          width: 100%;\n          position: absolute;\n          bottom: 0;\n        }\n\n        &:checked + .desc-long + .label-more-less {\n          .label-more {\n            display: none;\n          }\n          .label-less {\n            display: inline;\n          }\n        }\n\n        &:not(:checked) + .desc-long + .label-more-less {\n          .label-more {\n            display: inline;\n          }\n          .label-less {\n            display: none;\n          }\n        }\n      }\n\n      .desc-long {\n        max-height: 200px;\n        overflow: hidden;\n        transform: max-width 0.6;\n        p:last-child {\n          margin-bottom: 0;\n        }\n      }\n\n      label.label-more-less {\n        cursor: pointer;\n        line-height: normal;\n        color: #8c1d40;\n        text-align: right;\n        border: 0;\n        margin: 0;\n        font-weight: 400;\n        display: inline;\n        position: absolute;\n        bottom: 0.2rem;\n        right: -2.5rem;\n      }\n    }\n\n    tr.row-info {\n      td:first-child {\n        flex-basis: 55%;\n      }\n\n      td:last-child {\n      }\n    }\n\n    tr:not([data-is-open=\"true\"]) + tr.row-info {\n      overflow: hidden;\n      height: 0;\n    }\n\n    tr[data-is-open=\"true\"] + tr.row-info {\n      height: auto;\n    }\n  }\n`;\n\nexport { Table };\n","// @ts-check\n\nimport styled, { createGlobalStyle } from \"styled-components\";\n\nconst ThemeStyle = createGlobalStyle`\n  :root {\n    --uds-dp-section-margin: 96px;\n  }\n\n  @media (max-width: 768px) {\n    :root {\n      --uds-dp-section-margin: 48px;\n    }\n  }\n\n  .element-focus:focus {\n    outline: none;\n    box-shadow: 0px 0px 0px 2px #fff, 0px 0px 0px 4px #191919 !important;\n  }\n\n  div[class^=uds-hero] h1 {\n    margin-left: 0.15em;\n\n    span {\n      margin-left: 0;\n    }\n  }\n\n  h1 span.highlight-gold,\n  h2 span.highlight-gold{\n    margin-left: 0.15em;\n  }\n\n  .card > .card-buttons {\n    padding-bottom: 8px !important;\n  }\n`;\n\nconst Main = styled.main`\n  &.dg-margin-top {\n    margin-top: var(--uds-dp-section-margin);\n  }\n\n  &.main-section > section:not(.no-space),\n  & > section section:not(.no-space) {\n    margin-bottom: var(--uds-dp-section-margin);\n\n    & > * {\n      margin-top: 0;\n      padding-top: 0;\n    }\n\n    & h2 {\n      line-height: 1;\n    }\n  }\n`;\n\nexport { Main, ThemeStyle };\n"],"names":[],"sourceRoot":""}