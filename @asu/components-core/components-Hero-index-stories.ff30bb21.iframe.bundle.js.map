{"version":3,"file":"components-Hero-index-stories.ff30bb21.iframe.bundle.js","mappings":";;;AAoBA","sources":["webpack://@asu/components-core/./src/components/Hero/index.js"],"sourcesContent":["// @ts-check\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\n\nimport {\n  contentPropType,\n  imagePropType,\n} from \"../../core/models/shared-prop-types\";\nimport { HeroImage } from \"./index.styles\";\n\n/**\n * @typedef {import('../../core/types/hero-types').HeroProps} HeroProps\n */\n\n/**\n * @param {HeroProps} props\n * @returns {JSX.Element}\n * @ignore\n */\nfunction storyHeroHtmlTemplate({ image, title, contents }) {\n  // eslint-disable-next-line no-console\n  console.log({ image, title, contents });\n  //  TODO: to be implemented\n  return <div>TODO: to be implemented</div>;\n}\n\n/**\n * @param {HeroProps} props\n * @returns {JSX.Element}\n * @ignore\n */\nfunction headingHeroHtmlTemplate({\n  image,\n  subTitle,\n  title,\n  contents,\n  contentsColor,\n}) {\n  const imageSize = {\n    small: \"uds-hero-sm\",\n    medium: \"uds-hero-md\",\n    large: \"uds-hero-lg\",\n    undefined: \"\",\n  };\n\n  const highlightColor = {\n    gold: \"highlight-gold\",\n    black: \"highlight-black\",\n    white: \"highlight-white\",\n    none: \"text-white\",\n    undefined: \"\",\n  };\n\n  const textColor = {\n    black: \"text-dark\",\n    white: \"text-white\",\n    undefined: \"\",\n  };\n\n  return (\n    <div\n      className={classNames(`uds-hero`, {\n        [imageSize[image?.size]]: image?.size,\n      })}\n    >\n      <div className=\"hero-overlay\" />\n      <HeroImage\n        className=\"hero\"\n        src={image?.url}\n        alt={image?.altText}\n        data-testid=\"hero-image\"\n      />\n\n      {subTitle && (\n        <div role=\"doc-subtitle\" data-testid=\"hero-subtitle\">\n          <span\n            className={classNames({\n              [textColor[subTitle.color]]: subTitle.color,\n              [highlightColor[subTitle.highlightColor]]:\n                subTitle.highlightColor,\n            })}\n          >\n            {subTitle.text}\n          </span>\n        </div>\n      )}\n\n      {title && (\n        <h1 style={{ maxWidth: title.maxWidth || \"\" }} data-testid=\"hero-title\">\n          <span\n            className={classNames({\n              [textColor[title.color]]: title.color,\n              [highlightColor[title.highlightColor]]: title.highlightColor,\n            })}\n          >\n            {title.text}\n          </span>\n        </h1>\n      )}\n\n      {contents && (\n        <div\n          data-testid=\"hero-content\"\n          className={classNames(\"content\", {\n            [textColor[contentsColor]]: contentsColor,\n          })}\n        >\n          {contents.map((content, index) => (\n            // eslint-disable-next-line react/no-array-index-key\n            <p key={`content-${index}`}>{content.text}</p>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n *\n * @param {HeroProps} props\n * @returns {JSX.Element}\n */\nconst Hero = props => {\n  const type = props.type || \"heading-hero\";\n\n  const templateTypes = {\n    \"heading-hero\": () => headingHeroHtmlTemplate(props),\n    \"story-hero\": () => storyHeroHtmlTemplate(props),\n    \"undefined\": () => {\n      // eslint-disable-next-line no-console\n      console.error(\n        `the type '${type}' is not supported by the 'Hero' component.`\n      );\n      return null;\n    },\n  };\n\n  return templateTypes[type]();\n};\n\nHero.propTypes = {\n  type: PropTypes.oneOf([\"heading-hero\", \"story-hero\"]),\n  image: imagePropType,\n  title: contentPropType,\n  subTitle: contentPropType,\n  contents: PropTypes.arrayOf(contentPropType),\n  contentsColor: PropTypes.string,\n};\n\nexport { Hero };\n"],"names":[],"sourceRoot":""}