"use strict";(self.webpackChunk_asu_components_core=self.webpackChunk_asu_components_core||[]).push([[138],{"./src/components/ButtonIconOnly/index.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CloseButton:()=>CloseButton,DefaultButton:()=>DefaultButton,NextButton:()=>NextButton,PrevButton:()=>PrevButton,__namedExportsOrder:()=>__namedExportsOrder,default:()=>index_stories});var react=__webpack_require__("../../node_modules/react/index.js"),prop_types=__webpack_require__("../../node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types),shared=__webpack_require__("../../shared/index.js");const gaDefaultObject={name:"onclick",event:"link",action:"click",type:"internal link",region:"main content"},ButtonIconOnly=({color,icon,innerRef,onClick,size,cardTitle})=>react.createElement("button",{type:"button",className:`btn btn-circle btn-circle-alt-${color} ${"large"===size&&"btn-circle-large"}`,ref:innerRef,onClick:()=>{return text=`${icon?.[1]} icon`,(0,shared.u_)({...gaDefaultObject,text,section:cardTitle}),void onClick?.();var text},"aria-label":"Close"},react.createElement("i",{className:`${icon?.[0]} fa-${icon?.[1]}`}));ButtonIconOnly.displayName="ButtonIconOnly",ButtonIconOnly.propTypes={color:prop_types_default().oneOf(["white","gray","black"]),icon:prop_types_default().arrayOf(prop_types_default().string),innerRef:prop_types_default().oneOfType([prop_types_default().object,prop_types_default().func,prop_types_default().string]),onClick:prop_types_default().func,cardTitle:prop_types_default().string,size:prop_types_default().oneOf(["large","small"])},ButtonIconOnly.defaultProps={color:"gray",icon:void 0,innerRef:void 0,onClick:void 0,size:"small",cardTitle:""},ButtonIconOnly.__docgenInfo={description:"@param {ButtonIconOnlyProps} props\n@returns {JSX.Element}",methods:[],displayName:"ButtonIconOnly",props:{color:{defaultValue:{value:'"gray"',computed:!1},description:"Color the button based on the background color",type:{name:"enum",value:[{value:'"white"',computed:!1},{value:'"gray"',computed:!1},{value:'"black"',computed:!1}]},required:!1},icon:{defaultValue:{value:"undefined",computed:!0},description:"React Font Awesome icon prefix and name string to be rendered in button label. Ex: ['fab', 'drupal']",type:{name:"arrayOf",value:{name:"string"}},required:!1},innerRef:{defaultValue:{value:"undefined",computed:!0},description:"ref will only get you a reference to the Button component, use innerRef to\nget a reference to the DOM element (for things like focus management).",type:{name:"union",value:[{name:"object"},{name:"func"},{name:"string"}]},required:!1},onClick:{defaultValue:{value:"undefined",computed:!0},description:"Event handler function for `<button>`",type:{name:"func"},required:!1},size:{defaultValue:{value:'"small"',computed:!1},description:"Button size",type:{name:"enum",value:[{value:'"large"',computed:!1},{value:'"small"',computed:!1}]},required:!1},cardTitle:{defaultValue:{value:'""',computed:!1},description:"Card title",type:{name:"string"},required:!1}}};const index_stories={title:"UDS/ButtonIconOnly",component:ButtonIconOnly,parameters:{docs:{description:{component:"The ButtonIconOnly component can be used to generate UDS-compliant `<button>` DOM\n        elements.\n\n## Usage\n\nThe ButtonIconOnly component will output `<button>` tags. you must provide an event handler function\nfor the `onClick` prop.\n\nView component examples and source code below.\n        "}}}},handleClick=e=>{e.preventDefault()},Template=args=>react.createElement("div",{className:"container-fluid"},react.createElement("div",{className:"row"},react.createElement("div",{className:"col col-sm-12 p-3"},react.createElement(ButtonIconOnly,args))));Template.displayName="Template";const DefaultButton=Template.bind({});DefaultButton.args={color:"white",icon:["fas","times"],onClick:handleClick};const CloseButton=Template.bind({});CloseButton.args={color:"white",icon:["fas","times"],onClick:handleClick},CloseButton.parameters={docs:{description:{story:'\n    const handleClick = e => {\n      e.preventDefault();\n      alert("The button was clicked.");\n    };\n\n    <Button\n      color: "white"\n      icon: ["fas", "times"]\n      onClick: {handleClick}\n    />Default Button</Button>'},source:{code:'\n      const handleClick = e => {\n  e.preventDefault();\n  alert("The button was clicked.");\n};\n\n<Button\n  color: "white"\n  icon: ["fas", "times"]\n  onClick: {handleClick}\n/>Default Button</Button>'}}};const NextButton=Template.bind({});NextButton.args={color:"white",icon:["fas","chevron-right"],onClick:handleClick,size:"large"},NextButton.parameters={docs:{description:{story:'\n    const handleClick = e => {\n      e.preventDefault();\n      alert("The button was clicked.");\n    };\n\n    <Button\n      color: "white"\n      icon: ["fas", "chevron-right"]\n      onClick: {handleClick}\n      size: "large"\n    />Next Button</Button>'},source:{code:'\n      const handleClick = e => {\n  e.preventDefault();\n  alert("The button was clicked.");\n};\n\n<Button\n  color: "white"\n  icon: ["fas", "chevron-right"]\n  onClick: {handleClick}\n  size: "large"\n/>Next Button</Button>'}}};const PrevButton=Template.bind({});PrevButton.args={color:"white",icon:["fas","chevron-left"],onClick:handleClick,size:"large"},PrevButton.parameters={docs:{description:{story:'\n    const handleClick = e => {\n      e.preventDefault();\n      alert("The button was clicked.");\n    };\n\n    <Button\n      color: "white"\n      icon: ["fas", "chevron-left"]\n      onClick: {handleClick}\n      size: "large"\n    />Prev Button</Button>'},source:{code:'\n      const handleClick = e => {\n  e.preventDefault();\n  alert("The button was clicked.");\n};\n\n<Button\n  color: "white"\n  icon: ["fas", "chevron-left"]\n  onClick: {handleClick}\n  size: "large"\n/>Prev Button</Button>'}}},DefaultButton.parameters={...DefaultButton.parameters,docs:{...DefaultButton.parameters?.docs,source:{originalSource:'args => <div className="container-fluid">\n    <div className="row">\n      <div className="col col-sm-12 p-3">\n        <ButtonIconOnly {...args} />\n      </div>\n    </div>\n  </div>',...DefaultButton.parameters?.docs?.source}}},CloseButton.parameters={...CloseButton.parameters,docs:{...CloseButton.parameters?.docs,source:{originalSource:'args => <div className="container-fluid">\n    <div className="row">\n      <div className="col col-sm-12 p-3">\n        <ButtonIconOnly {...args} />\n      </div>\n    </div>\n  </div>',...CloseButton.parameters?.docs?.source}}},NextButton.parameters={...NextButton.parameters,docs:{...NextButton.parameters?.docs,source:{originalSource:'args => <div className="container-fluid">\n    <div className="row">\n      <div className="col col-sm-12 p-3">\n        <ButtonIconOnly {...args} />\n      </div>\n    </div>\n  </div>',...NextButton.parameters?.docs?.source}}},PrevButton.parameters={...PrevButton.parameters,docs:{...PrevButton.parameters?.docs,source:{originalSource:'args => <div className="container-fluid">\n    <div className="row">\n      <div className="col col-sm-12 p-3">\n        <ButtonIconOnly {...args} />\n      </div>\n    </div>\n  </div>',...PrevButton.parameters?.docs?.source}}};const __namedExportsOrder=["DefaultButton","CloseButton","NextButton","PrevButton"]},"../../shared/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Sd:()=>utils.Sd,sg:()=>utils.sg,Ar:()=>utils.Ar,d0:()=>utils.d0,eD:()=>utils.eD,A8:()=>utils.A8,nF:()=>utils.nF,u_:()=>trackGAEvent,Ub:()=>useMediaQuery});var react=__webpack_require__("../../node_modules/react/index.js");function useMediaQuery(query){const[matches,setMatches]=(0,react.useState)(!1);return(0,react.useEffect)((()=>{const media=window.matchMedia(query);media.matches!==matches&&setMatches(media.matches);const listener=()=>{setMatches(media.matches)};return media.addEventListener("change",listener),()=>media.removeEventListener("change",listener)}),[matches,query]),matches}var utils=__webpack_require__("../../shared/utils/index.js"),prop_types=__webpack_require__("../../node_modules/prop-types/index.js"),prop_types_default=__webpack_require__.n(prop_types);prop_types_default().shape({event:prop_types_default().string,action:prop_types_default().string,name:prop_types_default().string,region:prop_types_default().string,section:prop_types_default().string,component:prop_types_default().string,type:prop_types_default().string,text:prop_types_default().string});const trackGAEvent=({event="",action="",name="",type="",section="",text="",region="",component=""})=>{const{dataLayer}=window,e={event:event.toLowerCase(),action:action.toLowerCase(),name:name.toLowerCase(),type:type.toLowerCase(),region:region.toLowerCase(),section:section.toLowerCase(),text:text.toLowerCase(),component:component.toLowerCase()};dataLayer&&dataLayer.push(e)}},"../../shared/utils/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Sd:()=>createRange,sg:()=>debounce,Ar:()=>iff,d0:()=>queryFirstFocusable,eD:()=>sanitizeDangerousMarkup,A8:()=>spreadClasses,nF:()=>throttle});const iff=(condition,then,otherwise)=>condition?then:otherwise,spreadClasses=classes=>(classes||[]).join(" ");var purify=__webpack_require__("../../node_modules/dompurify/dist/purify.js");function queryFirstFocusable(targetSelector){return(targetSelector?document.querySelector(targetSelector):document).querySelector('button, [href], input, select, textarea, [tabIndex]:not([tabIndex="-1"])')}const sanitizeDangerousMarkup=content=>({__html:(0,purify.sanitize)(content)}),createRange=(from,to,stop)=>{let i=from;const range=[];for(;i<to;)i>0&&i<=stop&&range.push(i),i+=1;return range};let throttleTimer=!1;const throttle=(callback,time)=>{throttleTimer||(throttleTimer=!0,setTimeout((()=>{callback(),throttleTimer=!1}),time))};let debounceTimer;const debounce=(callback,time)=>{window.clearTimeout(debounceTimer),debounceTimer=window.setTimeout(callback,time)}}}]);